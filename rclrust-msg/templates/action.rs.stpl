<@ let func_prefix = format!("{}__{}__{}", package, namespace, action.name); @>

use std::os::raw::c_void;

use <@= codegen::RCLRS_MSG_CORE @>::action::ActionT as _ActionT;

pub use self::goal::*;
pub use self::result::*;
pub use self::feedback::*;
pub use self::send_goal::*;
pub use self::get_result::*;
pub use self::feedback_message::*;

#[allow(non_camel_case_types)]
#[derive(std::fmt::Debug)]
pub struct <@= action.name @>;

#[link(name = "<@= package @>__rosidl_typesupport_c")]
extern "C" {
    fn <@= codegen::ACTION_TYPE_SUPPORT_PREFIX @>__<@= func_prefix @>() -> *const c_void;
}

impl _ActionT for <@= action.name @> {
    type Goal = <@= action.name @>_Goal;
    type Result = <@= action.name @>_Result;
    type Feedback = <@= action.name @>_Feedback;
    type SendGoal = <@= action.name @>_SendGoal;
    type GetResult = <@= action.name @>_GetResult;
    type FeedbackMessage = <@= action.name @>_FeedbackMessage;

    fn type_support() -> *const c_void {
        unsafe {
            <@= codegen::ACTION_TYPE_SUPPORT_PREFIX @>__<@= func_prefix @>()
        }
    }
}

mod goal {
<@ let msg = &action.goal; @>
<@ include!("./msg.rs.stpl"); @>
}  // mod goal

mod result {
<@ let msg = &action.result; @>
<@ include!("./msg.rs.stpl"); @>
}  // mod result

mod feedback {
<@ let msg = &action.feedback; @>
<@ include!("./msg.rs.stpl"); @>
}  // mod feedback

mod send_goal {
<@ let srv = &action.send_goal_srv(); @>
<@ include!("./srv.rs.stpl"); @>
}  // mod send_goal

mod get_result {
<@ let srv = &action.get_result_srv(); @>
<@ include!("./srv.rs.stpl"); @>
}  // mod get_result

mod feedback_message {
<@ let msg = &action.feedback_message_msg(); @>
<@ include!("./msg.rs.stpl"); @>
}  // mod feedback_message

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_type_support() {
        let ptr = <@= action.name @>::type_support();
        assert!(!ptr.is_null());
    }
}
